namespace CS {
	ConstantString database;
	ConstantString source;
	ConstantString memory;
	ConstantString readonly;
	ConstantString name;
	ConstantString next;
	ConstantString length;
	ConstantString done;
	ConstantString value;
	ConstantString changes;
	ConstantString lastInsertROWID;
	ConstantString code;
	
	v8::Local<v8::String> _InternalizedFromLatin1(v8::Isolate* isolate, const char* data) {
		return v8::String::NewFromOneByte(isolate, reinterpret_cast<const uint8_t*>(data), v8::NewStringType::kInternalized).ToLocalChecked();
	}
	inline v8::Local<v8::String> Get(v8::Isolate* isolate, ConstantString& constant) {
		return v8::Local<v8::String>::New(isolate, constant);
	}
	
	void _Init(v8::Isolate* isolate) {
		CS::database.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "database"));
		CS::source.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "source"));
		CS::memory.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "memory"));
		CS::readonly.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "readonly"));
		CS::name.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "name"));
		CS::next.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "next"));
		CS::length.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "length"));
		CS::done.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "done"));
		CS::value.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "value"));
		CS::changes.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "changes"));
		CS::lastInsertROWID.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "lastInsertROWID"));
		CS::code.Reset(isolate, CS::_InternalizedFromLatin1(isolate, "code"));
	}
}
