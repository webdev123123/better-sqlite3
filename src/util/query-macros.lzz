#define STATEMENT_THROW()                                                      \
	db->ThrowDatabaseError();                                                  \
	if (!bound) { sqlite3_clear_bindings(handle); }                            \
	return

#define STATEMENT_RETURN(return_value)                                         \
	info.GetReturnValue().Set(return_value);                                   \
	if (!bound) { sqlite3_clear_bindings(handle); }                            \
	return

#define STATEMENT_BIND(handle)                                                 \
	Binder binder(handle);                                                     \
	if (!binder.Bind(info, info.Length(), stmt)) {                             \
		sqlite3_clear_bindings(handle); return;                                \
	} ((void)0)

#define STATEMENT_START(RETURNS_DATA_CHECK)                                    \
	Statement* stmt = Unwrap<Statement>(info.This());                          \
	RETURNS_DATA_CHECK();                                                      \
	sqlite3_stmt* handle = stmt->handle;                                       \
	Database* db = stmt->db;                                                   \
	Database::State* db_state = db->GetState();                                \
	REQUIRE_DATABASE_OPEN(db_state);                                           \
	REQUIRE_DATABASE_NOT_BUSY(db_state);                                       \
	const bool bound = stmt->bound;                                            \
	if (!bound) {                                                              \
		STATEMENT_BIND(handle);                                                \
	} else if (info.Length() > 0)                                              \
		return ThrowTypeError("This statement already has bound parameters")


#define REQUIRE_STATEMENT_RETURNS_DATA()                                       \
	if (!stmt->returns_data)                                                   \
		return ThrowTypeError("This statement does not return data. Use run() instead")
#define REQUIRE_STATEMENT_DOESNT_RETURN_DATA()                                 \
	if (stmt->returns_data)                                                    \
		return ThrowTypeError("This statement returns data. Use get(), all(), or iterate() instead")


#define FUNCTION_START(instance)                                               \
	CustomFunction* cf = static_cast<CustomFunction*>(instance);               \
	v8::Isolate* isolate = cf->isolate;                                        \
	NewHandleScope

#define AGGREGATE_START()                                                      \
	FUNCTION_START(sqlite3_user_data(ctx));                                    \
	CustomAggregate* ca = static_cast<CustomAggregate*>(                       \
		sqlite3_aggregate_context(ctx, sizeof(CustomAggregate)));              \
	if (ca->IsUninitialized()) {                                               \
		ca->Activate(isolate, cf);                                             \
		if (!ca->IsActive()) return cf->PropagateJSError(ctx);                 \
	} /* no ((void)0) here because this pathway must remain open */

#define FUNCTION_EXECUTE(var, fn, ...)                                         \
	Database::State* db_state = cf->db->GetState();                            \
	v8::Local<v8::Value>* args = Data::GetArgumentsJS(                         \
		isolate, argv, argc, cf->safe_ints);                                   \
	bool was_busy = db_state->busy;                                            \
	db_state->busy = true;                                                     \
	v8::MaybeLocal<v8::Value> var = fn->Call(                                  \
		OnlyContext, v8::Undefined(isolate), argc, args);                      \
	db_state->busy = was_busy;                                                 \
	delete[] args;                                                             \
	if (var.IsEmpty()) {                                                       \
		__VA_ARGS__;                                                           \
		return cf->PropagateJSError(ctx);                                      \
	} ((void)0)
