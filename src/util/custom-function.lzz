class CustomFunction {
public:
	
	explicit CustomFunction(v8::Isolate* _isolate, Database* _db, v8::Local<v8::Function> _fn, const char* _name, bool _safe_ints)
		: fn(_isolate, _fn), isolate(_isolate), db(_db), name(CopyString(_name)), safe_ints(_safe_ints) {}
	~CustomFunction() { delete[] name; }
	
	static void xDestroy(void* instance) {
		delete static_cast<CustomFunction*>(instance);
	}
	
	static void xFunc(sqlite3_context* context, int argc, sqlite3_value** argv) {
		CustomFunction* cf = static_cast<CustomFunction*>(sqlite3_user_data(context));
		v8::Isolate* isolate = cf->isolate;
		NewHandleScope;
		
		v8::Local<v8::Value> args_fast[4];
		v8::Local<v8::Value>* args = NULL;
		if (argc != 0) {
			args = argc <= 4 ? args_fast : ALLOC_ARRAY<v8::Local<v8::Value>>(argc);
			Data::GetArgumentsJS(isolate, args, argv, argc, cf->safe_ints);
		}
		
		Database::State* db_state = cf->db->GetState();
		const bool was_busy = db_state->busy;
		db_state->busy = true;
		v8::MaybeLocal<v8::Value> maybe_return_value = v8::Local<v8::Function>::New(isolate, cf->fn)
			->Call(OnlyContext, v8::Undefined(isolate), argc, args);
		db_state->busy = was_busy;
		
		if (args != args_fast) delete[] args;
		if (maybe_return_value.IsEmpty()) cf->PropagateJSError(context);
		else Data::ResultValueFromJS(isolate, context, maybe_return_value.ToLocalChecked(), cf);
	}
	
	void ThrowResultValueError(sqlite3_context* context) {
		ThrowTypeError(CONCAT("Custom function ", name, "() returned an invalid value").c_str());
		PropagateJSError(context);
	}
	
private:
	void PropagateJSError(sqlite3_context* context) {
		assert(db->GetState()->was_js_error == false);
		db->GetState()->was_js_error = true;
		sqlite3_result_error(context, "", 0);
	}
	
	static const char* CopyString(const char* source) {
		size_t bytes = strlen(source) + 1;
		char* dest = new char[bytes];
		memcpy(dest, source, bytes);
		return dest;
	}
	
	const CopyablePersistent<v8::Function> fn;
	v8::Isolate* const isolate;
	Database* const db;
	const char* const name;
	const bool safe_ints;
};
