in c++:


Two JavaScript APIs:
- begin([string])
This returns a transaction object, optionally starting with an SQL statement compiled from string. You can .add() to append statements into the transaction. These statements may be read-only or not. When finished adding statements, you can .end(cb) or .commit(cb) (which you can do multiple times) to execute the transaction. The callback argument cb does not supply data, but COULD supply an error.
Possibly "run()" instead of "end()"/"commit()".
Possibly "prepare()" instead of "begin()".
Possibly "write()" instead of "begin()".
There is a single-statement, immediately-executing shorthand on the database, called "run()".
- query(string)
This returns a reader object, which is like a single-statement, read-only transaction object. It can be executed with .get(cb), .all(cb), or .each(cb)/.forEach(cb), depending on how the user wishes to consume the data. An error may be supplied instead of data.
Possibly "read()" instead of "query()".
There are immediately-executing shorthands on the database, called "get()", "all()", and "each()"/"forEach()".


should sqlite3_statement be created synchronously? (does it not involve I/O operation?)


the current disconnect() implementation will fail if there are any pending requests.
therefore, it should defer the actual CloseWorker until all pendings are clear. (writes AND reads)


remember to do db->Ref() and stmt->Ref() on every async operation, to protect from garbage collection



startTransaction() API does:
is the active_tranaction flag set? -> push to the db connection's transaction queue
otherwise -> set active_tranaction flag to 1, and exec "BEGIN;"



endTransaction() API does:
-> set active_tranaction flag to 2, and exec "COMMIT;"
-> flush up to, but not including, the next transaction



when statement is about to be executed:
is the active_tranaction flag 0 or 1? -> execute it
otherwise:
is the statement readonly? -> execute it
otherwise -> push it to the transaction queue, which is associated with the database connection



on commit hook AND on rollback hook:
if there is something in the db connection's queue -> flush up to, and including, the next transaction
otherwise -> set active_tranaction flag to 0



optionally enable, together:
PRAGMA journal_mode = WAL;
PRAGMA synchronous = 1;



---------- Automatic Atomic Transactions ----------
on commit hook, check for error, and if there was an error, return 1
the commit will then be converted into a rollback


---------- Package ----------
deal with ./test/ and .travis.yml


---------- Executable ----------
all tables should have INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL

in order for foreign keys to be unconditionally enforced, the child column must have NOT NULL

null values count as unique from eachother for UNIQUE constraints (and basically everything else)

DEFAULT applies when no value is specified for an INSERT. Explicitly given nulls do not trigger DEFAULT

foreign key REFERENCES <table> can be followed by ON DELETE and/or ON UPDATE:
SET NULL = when the parent's column is updated or deleted, the child's column becomes null
           (this still causes a violation if the child has NOT NULL)
SET DEFAULT = when the parent's column is updated or deleted, the child's column becomes the DEFAULT
              (this still causes a violation if the DEFAULT does not correspond with an actual parent)
CASCADE = when the parent row is deleted, the child row is deleted
          (for updates, the value propogates to all children)

ALTER TABLE actions

DROP TABLE actions
