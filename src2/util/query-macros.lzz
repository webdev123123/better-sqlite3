#define _QUERY_THROW(obj, UNBIND_ACTION, ...)                                  \
	db->ThrowDatabaseError();                                                  \
	__VA_ARGS__;                                                               \
	if (!bound) {UNBIND_ACTION;}                                               \
	return

#define _QUERY_RETURN(return_value, obj, UNBIND_ACTION)                        \
	info.GetReturnValue().Set(return_value);                                   \
	if (!bound) {UNBIND_ACTION;}                                               \
	return

#define _QUERY_BIND(obj, bind_args_count, UNBIND_ACTION)                       \
	binder.Bind(info, bind_args_count, obj);                                   \
	if (binder.GetError()) {                                                   \
		UNBIND_ACTION;                                                         \
		if (binder.GetError()[0] != 0) ThrowError(binder.GetError());          \
		return;                                                                \
	} ((void)0)

#define _QUERY_START(obj, object_name, bind_args_count, BIND_ACTION)           \
	Database* db = obj->db;                                                    \
	Database::State* db_state = db->GetState();                                \
	REQUIRE_DATABASE_OPEN(db_state);                                           \
	REQUIRE_DATABASE_NOT_BUSY(db_state);                                       \
	const bool bound = obj->bound;                                             \
	if (!bound) {                                                              \
		BIND_ACTION;                                                           \
	} else if (bind_args_count > 0)                                            \
		return ThrowTypeError("This "#object_name" already has bound parameters")


#define _STATEMENT_UNBIND(handle) sqlite3_clear_bindings(handle)
#define STATEMENT_THROW() _QUERY_THROW(stmt, _STATEMENT_UNBIND(handle))
#define STATEMENT_RETURN(return_value) _QUERY_RETURN(return_value, stmt, _STATEMENT_UNBIND(handle))
#define STATEMENT_BIND(handle, bind_args_count)                                \
	Binder binder(handle);                                                     \
	_QUERY_BIND(stmt, bind_args_count, _STATEMENT_UNBIND(handle))
#define STATEMENT_START(bind_args_count, RETURNS_DATA_CHECK)                   \
	Statement* stmt = Unwrap<Statement>(info.This());                          \
	RETURNS_DATA_CHECK();                                                      \
	sqlite3_stmt* handle = stmt->handle;                                       \
	_QUERY_START(stmt, statement, bind_args_count, STATEMENT_BIND(handle, bind_args_count))


#define _TRANSACTION_UNBIND(handles, handle_count)                             \
	for (int i=0; i<handle_count; ++i) sqlite3_clear_bindings(handles[i])
#define TRANSACTION_THROW(...) _QUERY_THROW(trans, _TRANSACTION_UNBIND(handles, handle_count), __VA_ARGS__)
#define TRANSACTION_RETURN(return_value) _QUERY_RETURN(return_value, trans, _TRANSACTION_UNBIND(handles, handle_count))
#define TRANSACTION_BIND(handles, handle_count)                                \
	MultiBinder binder(handles, handle_count);                                 \
	_QUERY_BIND(trans, info.Length(), _TRANSACTION_UNBIND(handles, handle_count))
#define TRANSACTION_START()                                                    \
	Transaction* trans = Unwrap<Transaction>(info.This());                     \
	sqlite3_stmt** handles = trans->handles;                                   \
	const int handle_count = trans->handle_count;                              \
	_QUERY_START(trans, transaction, info.Length(), TRANSACTION_BIND(handles, handle_count))


#define REQUIRE_STATEMENT_RETURNS_DATA()                                       \
	if (!stmt->returns_data)                                                   \
		return ThrowTypeError("This statement does not return data. Use run() instead")
#define REQUIRE_STATEMENT_DOESNT_RETURN_DATA()                                 \
	if (stmt->returns_data)                                                    \
		return ThrowTypeError("This statement returns data. Use get(), all(), or each() instead")


#define FUNCTION_START(instance)                                               \
	CustomFunction* cf = static_cast<CustomFunction*>(instance);               \
	v8::Isolate* isolate = cf->isolate;                                        \
	NewHandleScope

#define FUNCTION_EXECUTE(var, fn, ...)                                         \
	Database::State* db_state = cf->db->GetState();                            \
	v8::Local<v8::Value>* args = Data::GetArgumentsJS(                         \
		isolate, argv, argc, cf->safe_ints);                                   \
	bool was_busy = db_state->busy;                                            \
	db_state->busy = true;                                                     \
	v8::MaybeLocal<v8::Value> var = fn->Call(                                  \
		OnlyContext, v8::Undefined(isolate), argc, args);                      \
	db_state->busy = was_busy;                                                 \
	delete[] args;                                                             \
	if (var.IsEmpty()) {                                                       \
		__VA_ARGS__;                                                           \
		db_state->was_js_error = true;                                         \
		return sqlite3_result_error(ctx, "", 0);                               \
	} ((void)0)
