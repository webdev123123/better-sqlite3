#define NODE_ARGUMENTS const Nan::FunctionCallbackInfo<v8::Value>&
#define NODE_METHOD(name) static void name(NODE_ARGUMENTS info)
#define NODE_GETTER(name) static void name(v8::Local<v8::String> _, const Nan::PropertyCallbackInfo<v8::Value>& info)
#define REGISTER(name) friend void RegisterModule(v8::Local<v8::Object> exports, v8::Local<v8::Object> module); static void name(v8::Isolate* isolate, v8::Local<v8::Object> exports)

#define NewHandleScope v8::HandleScope scope(isolate)
#define EasyIsolate v8::Isolate* isolate = v8::Isolate::GetCurrent()
#define UseIsolate v8::Isolate* isolate = info.GetIsolate()
#define UseContext v8::Local<v8::Context> ctx = isolate->GetCurrentContext()
#define UseIsolateAndContext UseIsolate; UseContext
#define OnlyIsolate info.GetIsolate()
#define OnlyContext isolate->GetCurrentContext()
#define OnlyIsolateAndContext info.GetIsolate()->GetCurrentContext()

#define Unwrap Nan::ObjectWrap::Unwrap

inline v8::Local<v8::String> StringFromLatin1(v8::Isolate* isolate, const char* data, int length) {
	return v8::String::NewFromOneByte(isolate, reinterpret_cast<const uint8_t*>(data), v8::NewStringType::kNormal, length).ToLocalChecked();
}
inline v8::Local<v8::String> StringFromUtf8(v8::Isolate* isolate, const char* data, int length) {
	return v8::String::NewFromUtf8(isolate, data, v8::NewStringType::kNormal, length).ToLocalChecked();
}
inline v8::Local<v8::String> StringFromUtf16(v8::Isolate* isolate, const uint16_t* data, int length) {
	return v8::String::NewFromTwoByte(isolate, data, v8::NewStringType::kNormal, length).ToLocalChecked();
}
inline v8::Local<v8::String> InternalizedFromUtf8(v8::Isolate* isolate, const char* data, int length) {
	return v8::String::NewFromUtf8(isolate, data, v8::NewStringType::kInternalized, length).ToLocalChecked();
}

inline void SetFrozen(v8::Isolate* isolate, v8::Local<v8::Context> ctx, v8::Local<v8::Object> obj, ConstantString& key, v8::Local<v8::Value> value) {
	static const v8::PropertyAttribute FROZEN_PROPERTY = static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly);
	obj->DefineOwnProperty(ctx, CS::Get(isolate, key), value, FROZEN_PROPERTY).FromJust();
}

template<ErrorFactory T> void ThrowException(const char* message, int code = INT_MIN) {
	EasyIsolate;
	v8::Local<v8::Object> error = v8::Local<v8::Object>::Cast(T(StringFromUtf8(isolate, message, -1)));
	v8::Local<v8::String> codeString = code == INT_MIN ? v8::String::Empty(isolate) : ResultCodes::Get(isolate, code);
	error->Set(OnlyContext, CS::Get(isolate, CS::code), codeString).FromJust();
	isolate->ThrowException(error);
}
#define ThrowError(...) ThrowException<v8::Exception::Error>(__VA_ARGS__)
#define ThrowTypeError(...) ThrowException<v8::Exception::TypeError>(__VA_ARGS__)
#define ThrowRangeError(...) ThrowException<v8::Exception::RangeError>(__VA_ARGS__)

#define _REQUIRE_ARGUMENT(at, var, Type, message, ...)                         \
	if (info.Length() <= (at()) || !info[at()]->Is##Type())                    \
		return ThrowTypeError("Expected "#at" arguement to be "#message);      \
	var = v8::Local<v8::Type>::Cast(info[at()])__VA_ARGS__

#define REQUIRE_ARGUMENT_INT32(at, var)                                        \
	_REQUIRE_ARGUMENT(at, var, Int32, a 32-bit signed integer, ->Value())
#define REQUIRE_ARGUMENT_BOOLEAN(at, var)                                      \
	_REQUIRE_ARGUMENT(at, var, Boolean, a boolean, ->Value())
#define REQUIRE_ARGUMENT_STRING(at, var)                                       \
	_REQUIRE_ARGUMENT(at, var, String, a string)
#define REQUIRE_ARGUMENT_OBJECT(at, var)                                       \
	_REQUIRE_ARGUMENT(at, var, Object, an object)
#define REQUIRE_ARGUMENT_ARRAY(at, var)                                        \
	_REQUIRE_ARGUMENT(at, var, Array, an array)
#define REQUIRE_ARGUMENT_FUNCTION(at, var)                                     \
	_REQUIRE_ARGUMENT(at, var, Function, a function)

#define REQUIRE_LAST_ARGUMENT_FUNCTION(ivar, var)                              \
	int ivar = info.Length() - 1;                                              \
	if (ivar < 0 || !info[ivar]->IsFunction())                                 \
		return ThrowTypeError("Expected last argument to be a function");      \
	v8::Local<v8::Function> var = v8::Local<v8::Function>::Cast(info[ivar])

#define REQUIRE_DATABASE_OPEN(db)                                              \
	if (!db->open)                                                             \
		return ThrowTypeError("The database connection is not open")
#define REQUIRE_DATABASE_NOT_BUSY(db)                                          \
	if (db->busy)                                                              \
		return ThrowTypeError("This database connection is busy executing a query")

#define first() 0
#define second() 1
#define third() 2
#define fourth() 3
#define fifth() 4
#define sixth() 5
#define seventh() 6
#define eighth() 7
#define ninth() 8
#define tenth() 9

// Copies a C-String into the heap and returns a pointer to it.
inline const char* COPY(const char* source) {
	size_t bytes = strlen(source) + 1;
	char* dest = new char[bytes];
	strlcpy(dest, source, bytes);
	return dest;
}

// Returns a std:string of the concatenation of 2 or 3 well-formed C-strings.
std::string CONCAT(const char* a, const char* b, const char* c = NULL) {
	std::string result(a);
	result += b;
	if (c != NULL) result += c;
	return result;
}

// Allocates an empty array, without calling constructors/initializers.
template<class T> inline T* ALLOC_ARRAY(size_t count) {
	return static_cast<T*>(::operator new[](count * sizeof(T)));
}

// Deallocates an array, without calling destructors.
template<class T> inline void FREE_ARRAY(T* array_pointer) {
	::operator delete[](array_pointer);
}

#hdr
typedef v8::Local<v8::Value> (*ErrorFactory)(v8::Local<v8::String>);
typedef v8::Persistent<v8::String> ConstantString;
template <class T> using Persistent = v8::Persistent<T, v8::CopyablePersistentTraits<T>>;
#end
