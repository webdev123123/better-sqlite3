class Statement : public Nan::ObjectWrap, public Query {
public:
	
	static v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate, v8::Local<v8::Object> database, v8::Local<v8::String> source) {
		v8::Local<v8::Function> c = v8::Local<v8::Function>::New(isolate, constructor);
		v8::Local<v8::Value> args[2] = { database, source };
		constructing_privileges = true;
		v8::MaybeLocal<v8::Object> maybe_statement = c->NewInstance(OnlyContext, 2, args);
		constructing_privileges = false;
		return maybe_statement;
	}
	
	BindMap* GetBindMap(v8::Isolate* isolate) {
		if (has_bind_map) return BindMapPointer();
		BindMap* bind_map = BindMapPointer();
		int param_count = sqlite3_bind_parameter_count(handle);
		for (int i=1; i<=param_count; ++i) {
			const char* name = sqlite3_bind_parameter_name(handle, i);
			if (name != NULL) bind_map->Add(isolate, name + 1, i);
		}
		has_bind_map = true;
		return bind_map;
	}
	
	void CloseHandles() {
		if (alive) {
			alive = false;
			if (bound) sqlite3_clear_bindings(handle);
			sqlite3_finalize(handle);
		}
	}
	
	~Statement() {
		bool was_alive = alive;
		CloseHandles();
		if (was_alive) db->extras->stmts.erase(this);
	}
	
private:
	explicit Statement(Database* _db, sqlite3_stmt* _handle, bool _returns_data) : Nan::ObjectWrap(), Query(next_id++),
		db(_db),
		handle(_handle),
		alive(true),
		bound(false),
		has_bind_map(false),
		safe_ints_setting(_db->safe_ints),
		safe_ints(safe_ints_setting),
		pluck_setting(false),
		pluck(false),
		returns_data(_returns_data) {
		assert(handle != NULL);
		assert(db->open);
		assert(!db->busy);
		db->extras->stmts.insert(db->extras->stmts.end(), this);
	}
	
	REGISTER(Init) {
		v8::Local<v8::FunctionTemplate> t = Nan::New<v8::FunctionTemplate>(JS_new);
		t->InstanceTemplate()->SetInternalFieldCount(1);
		t->SetClassName(NEW_INTERNAL_STRING_FAST("Statement"));
		
		Nan::SetPrototypeMethod(t, "run", JS_run);
		Nan::SetPrototypeMethod(t, "get", JS_get);
		Nan::SetPrototypeMethod(t, "all", JS_all);
		Nan::SetPrototypeMethod(t, "each", JS_each);
		Nan::SetPrototypeMethod(t, "pluck", JS_pluck);
		Nan::SetPrototypeMethod(t, "bind", JS_bind);
		Nan::SetPrototypeMethod(t, "safeIntegers", JS_safeIntegers);
		Nan::SetAccessor(t->InstanceTemplate(), NEW_INTERNAL_STRING_FAST("returnsData"), JS_returnsData);
		
		constructor.Reset(exports->GetIsolate(), Nan::GetFunction(t).ToLocalChecked());
		next_id = 0;
		constructing_privileges = false;
	}
	
	NODE_METHOD(JS_new) {
		if (!constructing_privileges) {
			return ThrowTypeError("Statements can only be constructed by the db.prepare() method");
		}
		REQUIRE_ARGUMENT_OBJECT(first, v8::Local<v8::Object> database);
		REQUIRE_ARGUMENT_STRING(second, v8::Local<v8::String> source);
		Database* db = Unwrap<Database>(database);
		REQUIRE_DATABASE_OPEN(db);
		REQUIRE_DATABASE_NOT_BUSY(db);
		
		v8::String::Value sql(source);
		const void* tail;
		sqlite3_stmt* handle;
		bool returns_data;
		
		if (sqlite3_prepare16_v2(db->db_handle, *sql, sql.length() * sizeof(uint16_t) + 1, &handle, &tail) != SQLITE_OK) {
			return db->ThrowDatabaseError();
		}
		if (handle == NULL) {
			return ThrowRangeError("The supplied SQL string contains no statements");
		}
		if (tail != (const void*)(*sql + sql.length())) {
			sqlite3_finalize(handle);
			return ThrowRangeError("The supplied SQL string contains more than one statement");
		}
		if (sqlite3_stmt_readonly(handle) && sqlite3_column_count(handle) >= 1) {
			returns_data = true;
		} else {
			REQUIRE_DATABASE_NOT_READONLY(db, sqlite3_finalize(handle));
			returns_data = db->pragma_mode;
		}
		
		UseIsolateAndContext;
		Statement* stmt = new Statement(db, handle, returns_data);
		stmt->Wrap(info.This());
		SetFrozen(ctx, info.This(), "source", source);
		SetFrozen(ctx, info.This(), "database", database);
		
		info.GetReturnValue().Set(info.This());
	}
	
	NODE_METHOD(JS_run); // TODO
	NODE_METHOD(JS_get); // TODO
	NODE_METHOD(JS_all); // TODO
	NODE_METHOD(JS_each); // TODO
	NODE_METHOD(JS_pluck); // TODO
	NODE_METHOD(JS_bind); // TODO
	NODE_METHOD(JS_safeIntegers); // TODO
	NODE_GETTER(JS_returnsData); // TODO
	
	static v8::Persistent<v8::Function> constructor;
	static sqlite3_uint64 next_id;
	static bool constructing_privileges;
	
	Database* const db;
	sqlite3_stmt* const handle;
	bool alive :1;
	bool bound :1;
	bool has_bind_map :1;
	bool safe_ints_setting :1;
	bool safe_ints :1;
	bool pluck_setting :1;
	bool pluck :1;
	const bool returns_data :1;
};
